{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catg","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAG3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,aADK,CACL,QAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,KAEdO,QAAQC,IAAI,gDAMhB,SAGI,uBACIC,KAAO,OACPC,MAAUX,EACVY,SAzBc,SAACT,GAEvBF,EAAeE,EAAEU,OAAOF,a,+BCTnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAKAI,MAAOF,GALP,cAKbG,EALa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAgBZM,GAhBY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OACI,sBAAKc,UAAY,0CAAjB,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,kCAAMA,EAAN,WCLCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECJwB,SAAEA,GAE1B,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA8BA,OAzBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAW,WAEPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAIZ,CAAEpB,IASEqB,ED5BwBM,CAAc3B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QASpB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAHjB,IAKI,qBAAKA,UAAY,YAAjB,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADGA,EAAIC,aEvB3BiB,EAAe,WAExB,MAAoC5C,mBAAU,CAAC,YAA/C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACI,qCAEI,0DAEA,cAAC,EAAD,CAAaA,cAAkBA,IAJnC,IAMI,uBAEA,6BAEQ8C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,Y,MCdpC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a59de22c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => { //Recibo parámetro y desestructuro de props\r\n    \r\n    //const [inputValue, setInputValue] = useState('Buscando...')\r\n    const [inputValue, setInputValue] = useState('') //Se debe poner el string así sea vacío o da undefined\r\n\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue( e.target.value ); //Le mandamos el nuevo valor\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();//Previene el comportamiento por defecto del formulario, de cargar todo\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( catg => [inputValue,...catg] ); //Recién ejecutaamos y al otro componente le agregamos el nuevo valor\r\n            setInputValue(''); //Reseteamos el input para que esté vacío\r\n        } else{\r\n            console.log('Ingrese un texto de más de 2 caracteres.')\r\n        }\r\n\r\n    }\r\n    \r\n    return ( //Como le mandamos form no es necesario el fragment o etiqueta vacía, porque se envía UN elemento\r\n        <form onSubmit = { handleSubmit } > \r\n            {/*<h1> { inputValue } </h1>//Captura contantemente el valor de la caja de texto, actualizado*/}\r\n            \r\n            <input\r\n                type = \"text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange } //Si no se coloca esto no cambia el input\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired //Se debe enviar, sale warning si no se envía\r\n}","\r\nexport const getGifs = async ( category ) => { //No olvidar el export cuando se vaya a leer en otro archivo\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=txatLeZ7TRcknO80FAgP80FYZygDxp3f`;\r\n    //Usamos baticks o las comillas chuecas para combinar con constantes JSX\r\n    //El encodeURI es para darle buen formato, no complicarse con espacios, etc\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //El signo de interrogación es para preguntar que si vienen las imágenes recién lo utilice\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => { \r\n\r\n    //console.log( id, title, url );\r\n\r\n    return (\r\n        <div className = \"card animate__animated animate__fadeOut\">\r\n            <img src = { url } alt = { title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n        \r\n    /*const [images, setImages] = useState([]);\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( setImages )\r\n    }, [ category ] )*/\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n            \r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> } {/*Solo evalua el true, si es falso no hace nada*/}\r\n\r\n            <div className = \"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key = { img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }            \r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => { //Efectos no pueden ser ASYNC porque esperan algo síncrono\r\n        \r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setTimeout(() => {\r\n                \r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n                }, 1000);\r\n                \r\n            } )\r\n\r\n    }, [ category ] )\r\n\r\n    /*setTimeout(() => {\r\n        setstate({\r\n            data: [1,2,3],\r\n            loading: false\r\n        });\r\n    }, 3000);*/\r\n\r\n    return state; //{data:[], loading: true}\r\n\r\n}","import React, { useState } from 'react' //rafc tab para crear el esquelero con export\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState( ['Perú'] );\r\n\r\n    return (\r\n        <>\r\n\r\n            <h2>GifExpertApp Klein Pinto</h2>\r\n\r\n            <AddCategory setCategories = { setCategories } /> {/*Le mando la función para cambiar categories*/}\r\n\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key = { category } //Hay que colocarle una key única o da error\r\n                            category = { category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n//Componente llamado GifExpertApp\n//<h2>GifExpertApp</h2>\n//<hr />"],"sourceRoot":""}